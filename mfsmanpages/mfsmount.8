.TH mfsmount "8" "October 2020" "MooseFS 3.0.115-1" "This is part of MooseFS"
.SH NAME
mfsmount \- mount Moose File System
.SH SYNOPSIS
.B mfsmount
[\fIHOST\fP[\fB:\fP\fIPORT\fP]\fB:\fP[\fIPATH\fP]]
[options]
\fImountpoint\fP
.PP
.B mfsmount
\fB\-h\fP|\fB\-\-help\fP
.PP
.B mfsmount
\fB\-V\fP|\fB\-\-version\fP
.PP
Since 3.0.75 (Linux only):
.PP
.B mount -t moosefs
[options]
[\fIHOST\fP[\fB:\fP\fIPORT\fP]\fB:\fP[\fIPATH\fP]]
\fImountpoint\fP
.SH DESCRIPTION
.PP
Mount Moose File System.
.PP
General options:
.TP
\fB\-h\fP, \fB\-\-help
display help and exit
.TP
\fB\-V\fP
display version information and exit
.PP
FUSE options:
.TP
\fB\-d\fP, \fB-o debug\fP
enable debug mode (implies \fB\-f\fP)
.TP
\fB\-f\fP
foreground operation
.TP
\fB\-s\fP
disable multi-threaded operation
.PP
MooseFS options:
.TP
\fB\-c\fP \fICFGFILE\fP, \fB\-o mfscfgfile=\fP\fICFGFILE\fP
loads file with additional mount options
.TP
\fB\-m\fP, \fB\-\-meta\fP, \fB\-o mfsmeta\fP
mount MFSMETA companion filesystem instead of primary MooseFS
.TP
\fB\-n\fP
omit default mount options (\fB-o allow_other\fP)
.TP
\fB\-p\fP
prompt for password (interactive version of \fB\-o mfspassword=\fP\fIPASS\fP)
.TP
\fB\-H\fP \fIHOST\fP, \fB\-o mfsmaster=\fP\fIHOST\fP
connect with MooseFS master on \fIHOST\fP (default is mfsmaster)
.TP
\fB\-P\fP \fIPORT\fP, \fB\-o mfsport=\fP\fIPORT\fP
connect with MooseFS master on \fIPORT\fP (default is 9421)
.TP
\fB\-B\fP \fIIP\fP, \fB\-o mfsbind=\fP\fIIP\fP
local address to use for connecting with master instead of default one
.TP
\fB\-L\fP \fIIP\fP, \fB\-o mfsproxy=\fP\fIIP\fP
define listen ip address of local master proxy for communication with tools (default: 127.0.0.1)
.TP
\fB\-S\fP \fIPATH\fP, \fB-o mfssubfolder=\fP\fIPATH\fP
mount specified MooseFS directory (default is /, i.e. whole filesystem)
.TP
\fB\-o mfspassword=\fP\fIPASSWORD\fP
authenticate to MooseFS master with \fIPASSWORD\fP
.TP
\fB\-o mfspassfile=\fP\fIFILENAME\fP
authenticate to MooseFS master with password stored in first line of file pointed by \fIFILENAME\fP
.TP
\fB\-o mfsmd5pass=\fP\fIMD5\fP
authenticate to MooseFS master using directly given \fIMD5\fP (only if
\fBmfspassword\fP option is not specified)
.TP
\fB\-o mfsdonotrememberpassword\fP
do not remember password in memory - more secure, but when session is lost then new session is created without password
.TP
\fB\-o mfsdebug\fP
print some MooseFS-specific debugging information
.TP
\fB\-o mfsmemlock\fP
try to lock memory (all allocated memory will be mapped to physical RAM - which also means no swapping)
.TP
\fB\-o allowoomkiller\fP
do not disable out of memory killer (Linux only)
.TP
\fB\-o mfslimitarenas=\fP\fIN\fP
if N>0 then limit glibc malloc arenas (Linux only - default: 4)
.TP
\fB\-o mfsflattrash\fP
use flat trash structure in meta (option added for compatibility reasons - since version 3.0.64 trash is split into 4096 subfolders which reduces problems with big trashes)
.TP
\fB\-o mfsdelayedinit\fP
connection with master is done in background - with this option mount can be run without network (good for being run from fstab / init scripts etc.)
.TP
\fB\-o mfsmkdircopysgid=\fP\fIN\fP
sgid bit should be copied during mkdir operation (default depends on operating system)
.TP
\fB\-o mfssugidclearmode=\fP\fISMODE\fP
set sugid clear mode (see \fBSUGID CLEAR MODES\fP; default depends on operating system)
.TP
\fB\-o mfscachemode=\fP\fICMODE\fP
set cache mode (see \fBDATA CACHE MODES\fP; default is AUTO)
.TP
\fB\-o mfscachefiles\fP
(deprecated) preserve file data in cache (equivalent to '\fB\-o mfscachemode=YES\fP')
.TP
\fB\-o mfsattrcacheto=\fP\fISEC\fP
set attributes cache timeout in seconds (default: 1.0)
.TP
\fB\-o mfsxattrcacheto=\fP\fISEC\fP
set extended attributes (xattr) cache timeout in seconds (default: 30.0)
.TP
\fB\-o mfsentrycacheto=\fP\fISEC\fP
set file entry cache timeout in seconds (default: 0.0, i.e. no cache)
.TP
\fB\-o mfsdirentrycacheto=\fP\fISEC\fP
set directory entry cache timeout in seconds (default: 1.0)
.TP
\fB\-o mfsnegentrycacheto=\fP\fISEC\fP
set negative entry cache timeout in seconds (default: 0.0)
.TP
\fB\-o mfsgroupscacheto=\fP\fISEC\fP
set supplementary groups cache timeout in seconds (default: 300.0)
.TP
\fB\-o mfsrlimitnofile=\fP\fIN\fP
try to change limit of simultaneously opened file descriptors on startup
(default: 100000)
.TP
\fB\-o mfsnice=\fP\fILEVEL\fP
try to change nice level to specified value on startup (default: -19)
.TP
\fB\-o mfswritecachesize=\fP\fIN\fP
specify write cache size in MiB (in range: 16..2048 - default: 256)
.TP
\fB\-o mfsreadaheadsize=\fP\fIN\fP
define size of all read ahead buffers in MiB (in range: 16..2048 - default: 256)
.TP
\fB\-o mfsreadaheadleng=\fP\fIN\fP
define amount of bytes to be additionally read (in range: 128KiB..2MiB - default: 1048576)
.TP
\fB\-o mfsreadaheadtrigger=\fP\fIN\fP
define amount of bytes read sequentially that turns on read ahead (default: 10 * \fBmfsreadaheadleng\fP)
.TP
\fB\-o mfserroronlostchunk\fP
when all known chunkservers are connected to the master and the required chunk is missing then immediately finish I/O and return an error
.TP
\fB\-o mfserroronnospace\fP
when all known chunkservers are connected to the master and there is no free space then immediately finish I/O and return an error
.TP
\fB\-o mfsioretries=\fP\fIN\fP
specify number of retries before I/O error is returned (default: 30)
.TP
\fB\-o mfstimeout=\fP\fIN\fP
define maximum timeout in seconds before I/O error is returned (default: 0 - which means no timeout)
.TP
\fB\-o mfslogretry=\fP\fIN\fP
define minimal retry counter on which system will start log I/O messages (default: 5)
.TP
\fB\-o mfsfsyncmintime=\fP\fISEC\fP
force fsync before last file close when file was opened/created at least SEC seconds earlier (default: 0.0 - always do fsync before close)
.TP
\fB\-o mfspreflabels=\fP\fILABELEXPR\fP
specify preferred labels for choosing chunkservers during I/O
.TP
\fB\-o mfsnoxattrs\fP
turn off xattr support
.TP
\fB\-o mfsnoposixlocks\fP
turn off support for global posix locks (lockf + ioctl) - locks will work locally
.TP
\fB\-o mfsnobsdlocks\fP
turn off support for global BSD locks (flock) - locks will work locally
.PP
General mount options (see \fBmount\fP\|(8) manual):
.TP
\fB\-o rw\fP|\fB-o ro\fP
Mount file-system in read-write (default) or read-only mode respectively.
.TP
\fB\-o suid\fP|\fB-o nosuid\fP
Enable or disable suid/sgid attributes to work.
.TP
\fB\-o dev\fP|\fB-o nodev\fP
Enable or disable character or block special device files interpretation.
.TP
\fB\-o exec\fP|\fB-o noexec\fP
Allow or disallow execution of binaries.
.SH SUGID CLEAR MODE
During attribute change file systems sometimes clear flags suid and/or sgid.
Behavior is different on different file systems.
MFS tries to mimic behavior of most popular file system on given operating systems.
.TP
\fBNEVER\fP
MFS will not change suid and sgid bit on chown
.TP
\fBALWAYS\fP
clear suid and sgid on every chown - safest operation
.TP
\fBOSX\fP
standard behavior in OS X and Solaris (chown made by unprivileged user clear suid and sgid)
.TP
\fBBSD\fP
standard behavior in *BSD systems (like in OSX, but only when something is really changed)
.TP
\fBEXT\fP
standard behavior in most file systems on Linux (directories not changed, others: suid cleared always, sgid only when group exec bit is set)
.TP
\fBXFS\fP
standard behavior in XFS on Linux (like EXT but directories are changed by unprivileged users)
.SH DATA CACHE MODES
There are four cache modes: \fBDIRECT\fP, \fBNO\fP, \fBYES\fP and \fBAUTO\fP. Default option
is \fBAUTO\fP and you shuldn't change it unless you really know what you are
doing. In \fBAUTO\fP mode data cache is managed automatically by mfsmaster.
.TP
\fBDIRECT\fP
forces direct io (bypasses cache)
.TP
\fBNO\fP,\fBNONE\fP or \fBNEVER\fP
never allow files data to be kept in cache (safest but can reduce efficiency)
.TP
\fBYES\fP or \fBALWAYS\fP
always allow files data to be kept in cache (dangerous)
.TP
\fBAUTO\fP
file cache is managed by mfsmaster automatically (should be very safe and efficient)
.SH LABEL EXPRESSIONS
\fBLABELEXPR\fP grammar:
.TP 11
\fILABELEXPR\fP
-> \fIS\fP \fB;\fP \fILABELEXPR\fP | \fIS\fP
.TP
\fIS\fP
-> \fIS\fP \fB+\fP \fIM\fP | \fIM\fP
.TP
\fIM\fP
-> \fIM\fP \fIL\fP | \fIL\fP
.TP
\fIL\fP
-> \fBa\fP .. \fBz\fP | \fBA\fP .. \fBZ\fP | \fB(\fP \fIS\fP \fB)\fP | \fB[\fP \fIS\fP \fB]\fP
.PP
Subexpressions should be placed in priority order. Up to nine subexpressions (priorities) can be specified.
.SH "FSTAB"
On most Unix systems mfsmount can be invoked automatically from \fB/etc/fstab\fP. Be aware that \fBrw\fP or \fBro\fP option has to be specified in \fIoptions\fP. Also on many systems there should be option which informs the system that this mountpoint should be mounted after starting networking services (options such as \fB_netdev\fP or \fBlate\fP).
.PP
Linux:
.PP
\fBmfsmount\fP \fImountpoint\fP \fBfuse\fP \fIoptions\fP 0 0
.PP
*BSD:
.PP
\fBmfsmount_magic\fP \fImountpoint\fP \fBmoosefs\fP \fIoptions\fP\fB,mountprog=/usr/local/bin/mfsmount\fP 0 0
.PP
.PP
Since version 3.0.75 alternative form can be used:
.PP
Linux:
.PP
\fIHOST\fP[\fB:\fP\fIPORT\fP]\fB:\fP[\fIPATH\fP] \fImountpoint\fP \fBmoosefs\fP \fIoptions\fP 0 0
.PP
*BSD:
.PP
\fIHOST\fP[\fB:\fP\fIPORT\fP]\fB:\fP[\fIPATH\fP] \fImountpoint\fP \fBmoosefs\fP \fIoptions\fP\fB,mountprog=/usr/local/bin/mfsmount\fP 0 0
.SH "REPORTING BUGS"
Report bugs to <bugs@moosefs.com>.
.SH COPYRIGHT
Copyright (C) 2020 Jakub Kruszona-Zawadzki, Core Technology Sp. z o.o.

This file is part of MooseFS.

MooseFS is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 2 (only).

MooseFS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MooseFS; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02111-1301, USA
or visit http://www.gnu.org/licenses/gpl-2.0.html
.SH "SEE ALSO"
.BR mfsmaster (8),
.BR mfstools (1),
.BR mount (8)
